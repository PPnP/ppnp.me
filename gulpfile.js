const { src, dest, parallel, series } = require('gulp');

const htmlmin = require("gulp-htmlmin");
const validator = require('gulp-html');
const csso = require("gulp-csso");
const autoprefixer = require('gulp-autoprefixer');
const svgmin = require('gulp-svgmin');
const terser = require('gulp-terser');
const imagemin = require('gulp-imagemin');
const RevAll = require("gulp-rev-all");
const path = require('path');
const revdel = require('gulp-rev-delete-original');
const eslint = require('gulp-eslint');
const minifyInlineJSON = require('gulp-minify-inline-json');

const validateJs = () => {
    return src(['public/**/*.js', '!public/**/*.min.js'])
        .pipe(eslint())
        .pipe(eslint.format())
        .pipe(eslint.failAfterError());
}

const html = () => {
    return src('public/**/*.html', { base: "./" })
        .pipe(minifyInlineJSON())
        .pipe(htmlmin({
            collapseWhitespace: true,
            collapseBooleanAttributes: true,
            includeAutoGeneratedTags: false,
            minifyJS: true,
            minifyCSS: true,
            minifyURLs: true,
            removeComments: true,
            removeEmptyAttributes: true,
            removeScriptTypeAttributes: true,
            useShortDoctype: true
        }))
        .pipe(dest('./'))
}

const validateHtml = () => {
    return src('public/**/*.html', { base: "./" })
        .pipe(validator())
}

const revision = () => {
    const ignore = [
        '.html',
        'sitemap.xml',
        'robots.txt',
        'browserconfig.xml',
        '.php'
    ];

    return src("public/**")
        .pipe(RevAll.revision({
            dontRenameFile: ignore,
            dontUpdateReference: ignore,
            transformFilename: (file, hash) => hash.substr(0, 8) + path.extname(file.path),
            prefix: "https://ppnp.me/"
        }))
        .pipe(revdel())
        .pipe(dest("public"));
}

const css = () => {
    return src('public/**/*.css', { base: "./" })
        .pipe(csso())
        .pipe(autoprefixer({
            cascade: false
        }))
        .pipe(dest('./'))
}

const svg = () => {
    return src('public/**/*.svg', { base: "./" })
        .pipe(svgmin({
            plugins: [
                { removeUnknownsAndDefaults: false },
                { collapseGroups: false },
                { cleanupIDs: false }
            ]
        }))
        .pipe(dest('./'))
}

const js = () => {
    return src('public/**/*.js', { base: './' })
        .pipe(terser())
        .pipe(dest('./'));
}

const images = () => {
    return src('public/**/*.+(jpeg|jpg|png|gif|JPG|JPEG|PNG|GIF)', { base: "./" })
        .pipe(imagemin())
        .pipe(dest('./'))
}

exports.html = html;
exports.css = css;
exports.svg = svg;
exports.js = js;
exports.images = images;
exports.revision = revision;

exports.validateHtml = validateHtml;
exports.validateJs = validateJs;

exports.default = series(revision, parallel(html, css, svg, images, js));
exports.test = series(validateHtml, validateJs);
